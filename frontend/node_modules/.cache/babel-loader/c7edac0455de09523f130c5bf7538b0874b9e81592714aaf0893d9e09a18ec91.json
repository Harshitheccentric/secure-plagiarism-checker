{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000 // 30 seconds timeout\n});\n\n// Request interceptor for logging\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(` API Request: ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`);\n  return config;\n}, error => {\n  console.error('❌ API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor for logging\napi.interceptors.response.use(response => {\n  console.log(`✅ API Response: ${response.status} ${response.config.url}`);\n  return response;\n}, error => {\n  var _error$response;\n  console.error('❌ API Response Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\nexport const apiService = {\n  // Health check\n  healthCheck: () => api.get('/health'),\n  // File upload\n  uploadFiles: files => {\n    const formData = new FormData();\n    Array.from(files).forEach(file => {\n      formData.append('files', file);\n    });\n    return api.post('/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n  // List encrypted files\n  getFiles: () => api.get('/files'),\n  // Decrypt specific file\n  decryptFile: filename => api.post('/decrypt', {\n    filename\n  }, {\n    responseType: 'blob'\n  }),\n  // Decrypt all files\n  decryptAllFiles: () => api.post('/decrypt-all'),\n  // Generate plagiarism report\n  generateReport: (method = 'word_based') => api.get('/report', {\n    params: {\n      method\n    }\n  }),\n  // Get saved reports\n  getReports: () => api.get('/reports'),\n  // Download report\n  downloadReport: filename => api.get(`/reports/${filename}`, {\n    responseType: 'blob'\n  }),\n  // Clean up temporary files\n  cleanup: () => api.post('/cleanup'),\n  // Save matched sequences\n  saveMatchedSequences: async matchData => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/save-matches`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(matchData)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error saving matched sequences:', error);\n      throw error;\n    }\n  },\n  // Get matched sequences\n  getMatchedSequences: async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/matches`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching matched sequences:', error);\n      throw error;\n    }\n  },\n  // Download match file\n  downloadMatchFile: async filename => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/matches/${filename}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      a.download = filename;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    } catch (error) {\n      console.error('Error downloading match file:', error);\n      throw error;\n    }\n  }\n};\nexport default apiService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","_error$response","data","message","apiService","healthCheck","get","uploadFiles","files","formData","FormData","Array","from","forEach","file","append","post","headers","getFiles","decryptFile","filename","responseType","decryptAllFiles","generateReport","params","getReports","downloadReport","cleanup","saveMatchedSequences","matchData","fetch","body","JSON","stringify","ok","Error","json","getMatchedSequences","downloadMatchFile","blob","window","URL","createObjectURL","a","document","createElement","style","display","href","download","appendChild","click","revokeObjectURL","removeChild"],"sources":["/home/fate/prj/secure-plagiarism-checker/frontend/src/apiService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000, // 30 seconds timeout\n});\n\n// Request interceptor for logging\napi.interceptors.request.use(\n  (config) => {\n    console.log(` API Request: ${config.method?.toUpperCase()} ${config.url}`);\n    return config;\n  },\n  (error) => {\n    console.error('❌ API Request Error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for logging\napi.interceptors.response.use(\n  (response) => {\n    console.log(`✅ API Response: ${response.status} ${response.config.url}`);\n    return response;\n  },\n  (error) => {\n    console.error('❌ API Response Error:', error.response?.data || error.message);\n    return Promise.reject(error);\n  }\n);\n\nexport const apiService = {\n  // Health check\n  healthCheck: () => api.get('/health'),\n\n  // File upload\n  uploadFiles: (files) => {\n    const formData = new FormData();\n    Array.from(files).forEach((file) => {\n      formData.append('files', file);\n    });\n    \n    return api.post('/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n  },\n\n  // List encrypted files\n  getFiles: () => api.get('/files'),\n\n  // Decrypt specific file\n  decryptFile: (filename) => \n    api.post('/decrypt', { filename }, {\n      responseType: 'blob',\n    }),\n\n  // Decrypt all files\n  decryptAllFiles: () => api.post('/decrypt-all'),\n\n  // Generate plagiarism report\n  generateReport: (method = 'word_based') => \n    api.get('/report', { params: { method } }),\n\n  // Get saved reports\n  getReports: () => api.get('/reports'),\n\n  // Download report\n  downloadReport: (filename) => \n    api.get(`/reports/${filename}`, {\n      responseType: 'blob',\n    }),\n\n  // Clean up temporary files\n  cleanup: () => api.post('/cleanup'),\n\n  // Save matched sequences\n  saveMatchedSequences: async (matchData) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/save-matches`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(matchData),\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Error saving matched sequences:', error);\n      throw error;\n    }\n  },\n\n  // Get matched sequences\n  getMatchedSequences: async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/matches`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching matched sequences:', error);\n      throw error;\n    }\n  },\n\n  // Download match file\n  downloadMatchFile: async (filename) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/matches/${filename}`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      a.download = filename;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    } catch (error) {\n      console.error('Error downloading match file:', error);\n      throw error;\n    }\n  },\n};\n\nexport default apiService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}